/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vistas;

import Entidades.Cliente;
import Entidades.Mascota;
import conexion.ClienteData;
import conexion.MascotaData;
import static conexion.MascotaData.listarMascotasPorCliente;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Cristian
 */
public class PanelMascota extends javax.swing.JPanel {

    private DefaultTableModel modelo = new DefaultTableModel() {
        public boolean isCellEditable(int fila, int columna) {
            return false;
        }

    };
    private DefaultTableModel modeloCliente = new DefaultTableModel() {
        public boolean isCellEditable(int fila, int columna) {
            return false;
        }

    };
    JPanel panel = null;

    private Cliente cliente;
    private int documento;

    public PanelMascota(Cliente cliente) {
        this.cliente = cliente;
    }

    public int getDocumento() {
        return documento;
    }

    public void setDocumento(int documento) {
        this.documento = documento;
    }

    public PanelMascota(JPanel panelCambio1) {
        initComponents();
        panel = panelCambio1;
        armarCabecera();
        armarCabeceraCliente();
        jTableMascotas.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = jTableMascotas.getSelectedRow();
                    if (selectedRow != -1) {
                        String[] rowData = new String[jTableMascotas.getColumnCount()];
                        for (int i = 0; i < rowData.length; i++) {
                            Object value = jTableMascotas.getValueAt(selectedRow, i);
                            if (value != null) {
                                rowData[i] = value.toString();
                            } else {
                                rowData[i] = "";
                            }
                        }

                        // Asegúrate de ajustar los índices según la estructura de tu tabla de mascotas
                        // Suponiendo que la estructura de la tabla es: ID, Alias, Sexo, Especie, Raza, ColorPelo, FechaNacimiento, PesoActual
                        String alias = rowData[1];
                        String sexo = rowData[2];
                        String especie = rowData[3];
                        String raza = rowData[4];
                        String colorPelo = rowData[5];
                        String fechaNacimientoStr = rowData[6];
                        double pesoActual = Double.parseDouble(rowData[7]);

                        // Convierte la cadena de fecha en un objeto Date
                        Date fechaNacimiento = null;
                        try {
                            fechaNacimiento = new SimpleDateFormat("yyyy-MM-dd").parse(fechaNacimientoStr);
                        } catch (ParseException ex) {
                            // Manejar errores de conversión de fecha
                            ex.printStackTrace();
                        }

                        // Llena los campos de texto con los valores de la fila seleccionada
                        Nombre.setText(alias);
                        Sexo.setText(sexo);
                        Especie.setText(especie);
                        Raza.setText(raza);
                        ColorPelo.setText(colorPelo);
                        FechaNac.setDate(fechaNacimiento);
                        Peso.setText(String.valueOf(pesoActual));
                        CargarMasc.setEnabled(false);
                    }
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        Nombre = new javax.swing.JTextField();
        Raza = new javax.swing.JTextField();
        Peso = new javax.swing.JTextField();
        Sexo = new javax.swing.JTextField();
        ColorPelo = new javax.swing.JTextField();
        CargarMasc = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        eliminarMasc = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        limpiarCampos = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jBSalir = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Especie = new javax.swing.JTextField();
        FechaNac = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablaClienteSelec = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableMascotas = new javax.swing.JTable();
        BuscarCliente = new javax.swing.JButton();
        jTDocumento = new javax.swing.JTextField();
        botonMod = new javax.swing.JButton();
        jBLimpiar1 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(51, 153, 255));
        setPreferredSize(new java.awt.Dimension(880, 750));

        jPanel2.setBackground(new java.awt.Color(0, 51, 255));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(880, 750));

        CargarMasc.setText("CARGAR");
        CargarMasc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarMascActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Nombre");

        eliminarMasc.setText("ELIMINAR");
        eliminarMasc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarMascActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Especie");

        limpiarCampos.setText("LIMPIAR");
        limpiarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarCamposActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Raza");

        jBSalir.setBackground(new java.awt.Color(51, 153, 255));
        jBSalir.setForeground(new java.awt.Color(255, 255, 255));
        jBSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono patitas.png"))); // NOI18N
        jBSalir.setText("SALIR");
        jBSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalirActionPerformed(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Sexo");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Color de pelo");

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Fecha de nacimiento");

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Peso");

        jTablaClienteSelec.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nombre", "Apellido"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTablaClienteSelec);
        if (jTablaClienteSelec.getColumnModel().getColumnCount() > 0) {
            jTablaClienteSelec.getColumnModel().getColumn(0).setResizable(false);
            jTablaClienteSelec.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Cliente seleccionado");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Mascotas del cliente");

        jTableMascotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Sexo", "Especie", "Raza", "Color de pelo", "Fecha de nac.", "Peso"
            }
        ));
        jScrollPane2.setViewportView(jTableMascotas);
        if (jTableMascotas.getColumnModel().getColumnCount() > 0) {
            jTableMascotas.getColumnModel().getColumn(0).setPreferredWidth(10);
        }

        BuscarCliente.setText("Buscar Cliente");
        BuscarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuscarClienteActionPerformed(evt);
            }
        });

        botonMod.setText("MODIFICAR");
        botonMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModActionPerformed(evt);
            }
        });

        jBLimpiar1.setText("Limpiar");
        jBLimpiar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLimpiar1ActionPerformed(evt);
            }
        });

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono patitas.png"))); // NOI18N

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono patitas.png"))); // NOI18N

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono patitas.png"))); // NOI18N

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono patitas.png"))); // NOI18N

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono patitas.png"))); // NOI18N

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono patitas.png"))); // NOI18N

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono patitas.png"))); // NOI18N

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono patitas.png"))); // NOI18N

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logo.png"))); // NOI18N

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono patitas.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(369, 369, 369)
                        .addComponent(jLabel9))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(381, 381, 381)
                        .addComponent(jLabel8)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel10)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(BuscarCliente)
                                .addGap(18, 18, 18)
                                .addComponent(jTDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 791, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 44, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(CargarMasc))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(Raza, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                                        .addComponent(jLabel16))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(ColorPelo, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel17))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel15)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(FechaNac, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Sexo)
                                    .addComponent(Especie, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(58, 58, 58))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(botonMod)
                                        .addGap(26, 26, 26)
                                        .addComponent(eliminarMasc))
                                    .addComponent(Peso, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel19)
                                        .addGap(34, 34, 34)
                                        .addComponent(jBLimpiar1)
                                        .addGap(296, 296, 296))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(limpiarCampos, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jBSalir)
                                        .addGap(49, 49, 49)
                                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(70, 70, 70))))))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(BuscarCliente)))
                        .addGap(65, 65, 65)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(Especie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(Sexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(FechaNac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel1)
                                            .addComponent(Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addGap(2, 2, 2))
                                    .addComponent(jLabel15))
                                .addGap(23, 23, 23)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(Raza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4))
                                    .addComponent(jLabel14)))
                            .addComponent(jLabel16))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(ColorPelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6))
                            .addComponent(jLabel12)
                            .addComponent(jLabel17))))
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Peso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)
                        .addComponent(jBLimpiar1))
                    .addComponent(jLabel10)
                    .addComponent(jLabel19))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBSalir)
                            .addComponent(limpiarCampos)
                            .addComponent(eliminarMasc)
                            .addComponent(CargarMasc)
                            .addComponent(botonMod))))
                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 895, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jBSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalirActionPerformed
        this.setVisible(false);
        panel.removeAll();
        PanelFondo panelFondo = new PanelFondo();
        panelFondo.setBounds(0, 0, 880, 750);
        panelFondo.setVisible(true);
        panel.add(panelFondo);
        panelFondo.revalidate();
    }//GEN-LAST:event_jBSalirActionPerformed

    private void BuscarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuscarClienteActionPerformed
        if (jTDocumento.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "El documento está vacío.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
             try {
            String dni = jTDocumento.getText();
            this.documento = Integer.parseInt(dni);

         
                int documento = Integer.parseInt(dni);
                Cliente clienteEncontrado = ClienteData.buscarClientePorDocumento(documento);

                if (clienteEncontrado != null) {
                    modeloCliente.setRowCount(0);
                    cargarTablaCliente(clienteEncontrado);
//                DefaultTableModel modeloTabla = (DefaultTableModel) jTablaClienteSelec.getModel();
//                modeloTabla.setRowCount(0);
//
//                modeloTabla.addRow(new Object[]{
//                    clienteEncontrado.getNombre(),
//                    clienteEncontrado.getApellido()
//                });

                    ArrayList<Mascota> mascotas = listarMascotasPorCliente(documento);

                    if (!mascotas.isEmpty()) {
                        cargaTabla(documento);
//                    DefaultTableModel modeloMascotas = (DefaultTableModel) jTableMascotas.getModel();
//                    modeloMascotas.setRowCount(0);
//
//                    for (Mascota mascota : mascotas) {
//                        modeloMascotas.addRow(new Object[]{
//                            mascota.getIdMascota(),
//                            mascota.getAlias(),
//                            mascota.getSexo(),
//                            mascota.getEspecie(),
//                            mascota.getRaza(),
//                            mascota.getColorPelo(),
//                            mascota.getFechaNacimiento(),
//                            mascota.getPesoActual()
//                        });
//                    }
                    } else {
                        JOptionPane.showMessageDialog(null, "No se encontraron mascotas para el cliente.", "Error", JOptionPane.ERROR_MESSAGE);
                        botonMod.setEnabled(false);
                        eliminarMasc.setEnabled(false);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Cliente no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "El documento no es un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                jTDocumento.setText("");
            }
        }
    }//GEN-LAST:event_BuscarClienteActionPerformed

    private void CargarMascActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarMascActionPerformed
        if (jTDocumento.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "debe ingresar un documento primero");
        } else {
            if (Nombre.getText().isEmpty() || Sexo.getText().isEmpty() || Especie.getText().isEmpty() || Raza.getText().isEmpty() || ColorPelo.getText().isEmpty() || FechaNac == null) {
                JOptionPane.showMessageDialog(null, "Los campos obligatorios no pueden estar vacíos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
             try {
            String documento = jTDocumento.getText();
            String alias = Nombre.getText();
            String sexo = Sexo.getText();
            String especie = Especie.getText();
            String raza = Raza.getText();
            String colorPelo = ColorPelo.getText();
            Date fechaNacimiento = FechaNac.getDate(); // Obtener la fecha del JDateChooser
            double pesoActual = 0.0;

//            try {
                pesoActual = Double.parseDouble(Peso.getText());

//            } catch (NumberFormatException e) {
//                JOptionPane.showMessageDialog(null, "El peso no es un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
//                return;
//            }
            int documentoInt = Integer.parseInt(documento);
            Cliente clienteEncontrado = ClienteData.buscarClientePorDocumento(documentoInt);

            if (clienteEncontrado != null) {
                int idMascota = 0;
                // Crear una instancia de Mascota relacionada con el cliente encontrado
                Mascota nuevaMascota = new Mascota(idMascota, clienteEncontrado.getIdCliente(), alias, sexo, especie, raza, colorPelo, fechaNacimiento, pesoActual);
                System.out.println(nuevaMascota);
                // Llamar a un método para cargar la mascota
                MascotaData.guardarMascota(nuevaMascota);

                JOptionPane.showMessageDialog(this, "Mascota agregada exitosamente");
                  botonMod.setEnabled(true);
                        eliminarMasc.setEnabled(true);
                

                // Limpiar los campos de entrada
              
                Nombre.setText("");
                Sexo.setText("");
                Especie.setText("");
                Raza.setText("");
                ColorPelo.setText("");
                FechaNac.setDate(null);
                Peso.setText("");
                modelo.setRowCount(0);
                cargaTabla(documentoInt);
            } else {
                JOptionPane.showMessageDialog(null, "El cliente no fue encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
            }
             } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "El peso no es un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            } catch (Exception c){
            JOptionPane.showMessageDialog(this, "Error al ingresar los datos, verifique que ingrese correctamente cada campo");
            }
        }
    }//GEN-LAST:event_CargarMascActionPerformed

    private void botonModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModActionPerformed
        if (jTDocumento.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "debe ingresar un documento primero");
        } else {
            int selectedRow = jTableMascotas.getSelectedRow();

            if (selectedRow != -1) {

                Integer idMascota = (Integer) modelo.getValueAt(selectedRow, 0);

                String nuevoAlias = Nombre.getText();
                String nuevoSexo = Sexo.getText();
                String nuevaEspecie = Especie.getText();
                String nuevaRaza = Raza.getText();
                String nuevoColorPelo = ColorPelo.getText();
                Date nuevaFechaNacimiento = FechaNac.getDate();
                double nuevoPesoActual = Double.parseDouble(Peso.getText());
                if (Nombre.getText().isEmpty()||Sexo.getText().isEmpty()||Especie.getText().isEmpty()||Raza.getText().isEmpty()||ColorPelo.getText().isEmpty()||FechaNac.getDate()==null||Peso.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "debe completar todos los campos");
                }else{
                MascotaData.modificarMascota(idMascota, nuevoAlias, nuevoSexo, nuevaEspecie, nuevaRaza, nuevoColorPelo, nuevaFechaNacimiento, nuevoPesoActual);
//
//            modelo.setValueAt(nuevoAlias, selectedRow, 1); // Actualiza la columna 1 con el nuevo alias
//            modelo.setValueAt(nuevoSexo, selectedRow, 2); // Actualiza la columna 2 con el nuevo sexo
//            modelo.setValueAt(nuevaEspecie, selectedRow, 3); // Actualiza la columna 3 con la nueva especie
//            modelo.setValueAt(nuevaRaza, selectedRow, 4); // Actualiza la columna 4 con la nueva raza
//            modelo.setValueAt(nuevoColorPelo, selectedRow, 5); // Actualiza la columna 5 con el nuevo color de pelo
//            modelo.setValueAt(nuevaFechaNacimiento, selectedRow, 6); // Actualiza la columna 6 con la nueva fecha de nacimiento
//            modelo.setValueAt(nuevoPesoActual, selectedRow, 7);
                modelo.setRowCount(0);
                cargaTabla(this.documento);

                JOptionPane.showMessageDialog(this, "Mascota modificada exitosamente");
                    jTDocumento.setText("");
        Nombre.setText("");
        Sexo.setText("");
        Especie.setText("");
        Raza.setText("");
        ColorPelo.setText("");
        FechaNac.setDate(null);
        Peso.setText("");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Por favor, seleccione una mascota para modificar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_botonModActionPerformed

    private void eliminarMascActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarMascActionPerformed
        int selectedRow = jTableMascotas.getSelectedRow();
        if (selectedRow != -1) {
            Integer idMascota = (Integer) modelo.getValueAt(selectedRow, 0);

            MascotaData.eliminarMascota(idMascota);

            modelo.removeRow(selectedRow);
            JOptionPane.showMessageDialog(this, "mascota eliminada correctamente");
                jTDocumento.setText("");
        Nombre.setText("");
        Sexo.setText("");
        Especie.setText("");
        Raza.setText("");
        ColorPelo.setText("");
        FechaNac.setDate(null);
        Peso.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione una mascota para eliminar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_eliminarMascActionPerformed

    private void limpiarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarCamposActionPerformed
CargarMasc.setEnabled(true);
        jTDocumento.setText("");
        Nombre.setText("");
        Sexo.setText("");
        Especie.setText("");
        Raza.setText("");
        ColorPelo.setText("");
        FechaNac.setDate(null);
        Peso.setText("");
        modelo.setRowCount(0);
//        DefaultTableModel modeloClientes = (DefaultTableModel) jTablaClienteSelec.getModel();
//        modeloClientes.setRowCount(0);
        modeloCliente.setRowCount(0);

    }//GEN-LAST:event_limpiarCamposActionPerformed

    private void jBLimpiar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLimpiar1ActionPerformed
       CargarMasc.setEnabled(true);
        Nombre.setText("");
                Sexo.setText("");
                Especie.setText("");
                Raza.setText("");
                ColorPelo.setText("");
                FechaNac.setDate(null);
                Peso.setText("");
    }//GEN-LAST:event_jBLimpiar1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BuscarCliente;
    private javax.swing.JButton CargarMasc;
    private javax.swing.JTextField ColorPelo;
    private javax.swing.JTextField Especie;
    private com.toedter.calendar.JDateChooser FechaNac;
    private javax.swing.JTextField Nombre;
    private javax.swing.JTextField Peso;
    private javax.swing.JTextField Raza;
    private javax.swing.JTextField Sexo;
    private javax.swing.JButton botonMod;
    private javax.swing.JButton eliminarMasc;
    private javax.swing.JButton jBLimpiar1;
    private javax.swing.JButton jBSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTDocumento;
    private javax.swing.JTable jTablaClienteSelec;
    private javax.swing.JTable jTableMascotas;
    private javax.swing.JButton limpiarCampos;
    // End of variables declaration//GEN-END:variables
private void cargaTabla(int documento) {
        ArrayList<Mascota> mascotas = listarMascotasPorCliente(documento);
        for (Mascota mascota : mascotas) {
            modelo.addRow(new Object[]{
                mascota.getIdMascota(),
                mascota.getAlias(),
                mascota.getSexo(),
                mascota.getEspecie(),
                mascota.getRaza(),
                mascota.getColorPelo(),
                mascota.getFechaNacimiento(),
                mascota.getPesoActual()
            });
        }
    }

    private void armarCabecera() {
        modelo.addColumn("ID");
        modelo.addColumn("Nombre");
        modelo.addColumn("Especie");
        modelo.addColumn("Raza");
        modelo.addColumn("Sexo");
        modelo.addColumn("Color de pelo");
        modelo.addColumn("fecha Nac");
        modelo.addColumn("Peso");
        jTableMascotas.setModel(modelo);

    }

    private void armarCabeceraCliente() {
        modeloCliente.addColumn("Nombre");
        modeloCliente.addColumn("Apellido");
        jTablaClienteSelec.setModel(modeloCliente);
    }

    private void cargarTablaCliente(Cliente cliente) {
        modeloCliente.addRow(new Object[]{
            cliente.getNombre(),
            cliente.getApellido()
        });
    }
}
